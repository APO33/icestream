#include "serverosc.h"
//#include "player.h"

int serverosc::done;
const char* serverosc::port;
const char* serverosc::address;
const char* serverosc::receivedData;
float serverosc::readData;
//QByteArray* serverosc::message;

serverosc::serverosc()
{

    done = 0;
    address = "/icestream/volume/";
    port = "7770";
    receivedData = "10";
    //message->resize(3);
    //message[0] = address;
    //message[1] = port;
    //message[2] = receivedData;
    // start a new server on port "..."
       st = lo_server_thread_new(port, error);

       // add method that will match any path and args
       lo_server_thread_add_method(st, NULL, NULL, generic_handler, NULL);

       // add method that will match the path /foo/bar, with two numbers, coerced
       // to float and int
       //lo_server_thread_add_method(st, address, "fi", foo_handler, NULL);

       // add method that will match the path /blobtest with one blob arg
       lo_server_thread_add_method(st, address, "b", blobtest_handler, NULL);

       // add method that will match the path /quit with no args
       lo_server_thread_add_method(st, "/quit", "", quit_handler, NULL);

       lo_server_thread_start(st);

       /*while (!done) {
   #ifdef WIN32
           Sleep(1);
   #else
           //usleep(1000);
   #endif
       }*/


}
serverosc::~serverosc()
{
    //lo_server_thread_free(st);
    delete this;
}

   void serverosc::error(int num, const char *msg, const char *path)
   {
       printf("liblo server error %d in path %s: %s\n", num, path, msg);
       fflush(stdout);
   }

   /* catch any incoming messages and display them. returning 1 means that the
    * message has not been fully handled and the server should try other methods */
   int serverosc::generic_handler(const char *path, const char *types, lo_arg ** argv,
                       int argc, void *data, void *user_data)
   {
       int i;
       static float floatArg;
       int intArg;
       printf("path: <%s>\n", path);
       for (i = 0; i < argc; i++) {
           printf("arg %d '%c' ", i, types[i]);
           lo_arg_pp((lo_type)types[i], argv[i]);
           printf("\n");
       }
       printf("\n");
       fflush(stdout);
       if (argv[0]->f)
       {
        floatArg = argv[0]->f;
        readData = static_cast<int>(floatArg);
       }
       if (argv[1]->i)
       {
        intArg = argv[1]->i;
        readData = intArg;
       }
       /* example showing pulling the argument values out of the argv array */
       printf("%s <- f:%f, i:%d\n\n", path, argv[0]->f, argv[1]->i);
       fflush(stdout);

       return 0;
   }

   int serverosc::blobtest_handler(const char *path, const char *types, lo_arg ** argv,
                        int argc, void *data, void *user_data)
   {
       /* example showing how to get data for a blob */
       int i, size = argv[0]->blob.size;
       char mydata[6];

       unsigned char *blobdata = (unsigned char*)lo_blob_dataptr((lo_blob)argv[0]);
       int blobsize = lo_blob_datasize((lo_blob)argv[0]);

       /* Alternatively:
        * blobdata = &argv[0]->blob.data;
        * blobsize = argv[0]->blob.size;
        */

       /* Don't trust network input! Blob can be anything, so check if
          each character is a letter A-Z. */
       for (i=0; i<6 && i<blobsize; i++)
           if (blobdata[i] >= 'A' && blobdata[i] <= 'Z')
               mydata[i] = blobdata[i];
           else
               mydata[i] = '.';
       mydata[5] = 0;

       printf("%s <- length:%d '%s'\n", path, size, mydata);
       fflush(stdout);

       return 0;
   }

   int serverosc::quit_handler(const char *path, const char *types, lo_arg ** argv,
                    int argc, void *data, void *user_data)
   {
       done = 1;
       printf("quiting\n\n");
       fflush(stdout);

       return 0;
   }

   /*void serverosc::setMsg()
   {
        message[0] = address;
        message[1] = port;
        message[2] = receivedData;
   }*/
   /* QByteArray* serverosc::getMsg()
   {
        return message;
   }*/
 void serverosc::setAddress(const char* add)
 {
    address = add;
 }

  const char* serverosc::getAddress()
 {
    return address;
 }

 void serverosc::setPort(const char* portIn)
 {
    port = portIn;
 }

 const char* serverosc::getPort()
 {
    return port;
 }

  void serverosc::setData(float datas)
 {
    readData = datas;
 }

  float serverosc::getData()
 {
    return readData;
 }
